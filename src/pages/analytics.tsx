 import { useEffect, useState } from 'react';
import { withGuardianGate } from '@/components/withGuardianGate';
import supabase from '@/utils/supabaseClient';
import styles from '@/styles/crtLaunch.module.css';
import { Line, Pie } from 'react-chartjs-2';
import {
Â Â Chart as ChartJS,
Â Â LineElement,
Â Â ArcElement,
Â Â PointElement,
Â Â CategoryScale,
Â Â LinearScale,
Â Â Tooltip,
Â Â Legend,
} from 'chart.js';

ChartJS.register(LineElement, ArcElement, PointElement, CategoryScale, LinearScale, Tooltip, Legend);

interface XPLog {
Â Â type: string;
Â Â amount: number;
Â Â created_at: string;
Â Â description: string;
}

interface MissionStat {
Â Â mission_id: string;
Â Â count: number;
}

function AnalyticsPage() {
export default withGuardianGate(Page);
Â Â const [xpLogs, setXPLogs] = useState<XPLog[]>([]);
Â Â const [missionStats, setMissionStats] = useState<MissionStat[]>([]);
Â Â const [crateStats, setCrateStats] = useState<{ totalXP: number; count: number }>({ totalXP: 0, count: 0 });
Â Â const [xpProjection, setXPProjection] = useState<number>(0);
Â Â const [xpGraph, setXPGraph] = useState<{ date: string; net: number }[]>([]);
Â Â const [xpByType, setXPByType] = useState<Record<string, number>>({});

Â Â useEffect(() => {
Â Â Â Â const fetchData = async () => {
Â Â Â Â Â Â const { data: { user } } = await supabase.auth.getUser();
Â Â Â Â Â Â if (!user) return;

Â Â Â Â Â Â const { data: logs } = await supabase
Â Â Â Â Â Â Â Â .from('xp_history')
Â Â Â Â Â Â Â Â .select('*')
Â Â Â Â Â Â Â Â .eq('user_id', user.id)
Â Â Â Â Â Â Â Â .order('created_at');

Â Â Â Â Â Â setXPLogs(logs || []);

Â Â Â Â Â Â // Crate ROI
Â Â Â Â Â Â const { data: crates } = await supabase
Â Â Â Â Â Â Â Â .from('xp_crates')
Â Â Â Â Â Â Â Â .select('xp_value')
Â Â Â Â Â Â Â Â .eq('user_id', user.id)
Â Â Â Â Â Â Â Â .eq('opened', true);

Â Â Â Â Â Â const totalXP = crates?.reduce((sum, c) => sum + c.xp_value, 0) || 0;
Â Â Â Â Â Â const count = crates?.length || 0;
Â Â Â Â Â Â setCrateStats({ totalXP, count });

Â Â Â Â Â Â // Mission stats
Â Â Â Â Â Â const { data: missionClaims } = await supabase
Â Â Â Â Â Â Â Â .from('mission_claims')
Â Â Â Â Â Â Â Â .select('mission_id');

Â Â Â Â Â Â const freq: Record<string, number> = {};
Â Â Â Â Â Â (missionClaims || []).forEach((c) => {
Â Â Â Â Â Â Â Â freq[c.mission_id] = (freq[c.mission_id] || 0) + 1;
Â Â Â Â Â Â });

Â Â Â Â Â Â const topMissions = Object.entries(freq)
Â Â Â Â Â Â Â Â .map(([id, count]) => ({ mission_id: id, count }))
Â Â Â Â Â Â Â Â .sort((a, b) => b.count - a.count)
Â Â Â Â Â Â Â Â .slice(0, 3);

Â Â Â Â Â Â setMissionStats(topMissions);

Â Â Â Â Â Â // XP graph & projection
Â Â Â Â Â Â const grouped: Record<string, number> = {};
Â Â Â Â Â Â logs?.forEach((log) => {
Â Â Â Â Â Â Â Â const date = new Date(log.created_at).toLocaleDateString();
Â Â Â Â Â Â Â Â grouped[date] = (grouped[date] || 0) + log.amount;
Â Â Â Â Â Â });

Â Â Â Â Â Â const plot = Object.entries(grouped).map(([date, net]) => ({ date, net }));
Â Â Â Â Â Â setXPGraph(plot);

Â Â Â Â Â Â const total = logs?.reduce((sum, l) => sum + l.amount, 0) || 0;
Â Â Â Â Â Â const types: Record<string, number> = {};
Â Â Â Â Â Â logs?.forEach((l) => {
Â Â Â Â Â Â Â Â types[l.type] = (types[l.type] || 0) + l.amount;
Â Â Â Â Â Â });
Â Â Â Â Â Â setXPByType(types);

Â Â Â Â Â Â // Autonomy projection
Â Â Â Â Â Â const xpToday = plot.slice(-1)[0]?.net || 0;
Â Â Â Â Â Â const remaining = Math.max(100000 - total, 0);
Â Â Â Â Â Â const days = xpToday > 0 ? Math.ceil(remaining / xpToday) : -1;
Â Â Â Â Â Â setXPProjection(days);
Â Â Â Â };

Â Â Â Â fetchData();
Â Â }, []);

Â Â return (
import Head from 'next/head';
<Head>
  <title>Felena Theory</title>
  <meta name="description" content="Enter the XP Quantum Grid." />
</Head>

Â Â Â Â <div className={styles.crtScreen}>
Â Â Â Â Â Â <h2>ðŸ“Š OPERATOR ANALYTICS</h2>
Â Â Â Â Â Â <p>Performance breakdown and projection toward Autonomy.</p>

Â Â Â Â Â Â {/* XP Trend Line */}
Â Â Â Â Â Â {xpGraph.length > 0 && (
Â Â Â Â Â Â Â Â <>
Â Â Â Â Â Â Â Â Â Â <h3>ðŸ“ˆ XP Gained Over Time</h3>
Â Â Â Â Â Â Â Â Â Â <Line
Â Â Â Â Â Â Â Â Â Â Â Â data={{
Â Â Â Â Â Â Â Â Â Â Â Â Â Â labels: xpGraph.map((d) => d.date),
Â Â Â Â Â Â Â Â Â Â Â Â Â Â datasets: [
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â label: 'Net XP',
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â data: xpGraph.map((d) => d.net),
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â fill: false,
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â borderColor: '#00ff99',
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â },
Â Â Â Â Â Â Â Â Â Â Â Â Â Â ],
Â Â Â Â Â Â Â Â Â Â Â Â }}
Â Â Â Â Â Â Â Â Â Â Â Â options={{
Â Â Â Â Â Â Â Â Â Â Â Â Â Â scales: {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â y: { beginAtZero: true, ticks: { color: '#fff' }, grid: { color: '#444' } },
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â x: { ticks: { color: '#fff' }, grid: { color: '#444' } },
Â Â Â Â Â Â Â Â Â Â Â Â Â Â },
Â Â Â Â Â Â Â Â Â Â Â Â Â Â plugins: {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â legend: { labels: { color: '#fff' } },
Â Â Â Â Â Â Â Â Â Â Â Â }}}
Â Â Â Â Â Â Â Â Â Â />
Â Â Â Â Â Â Â Â </>
Â Â Â Â Â Â )}

Â Â Â Â Â Â {/* XP Breakdown */}
Â Â Â Â Â Â <div style={{ marginTop: '2rem' }}>
Â Â Â Â Â Â Â Â <h3>ðŸ’¸ XP by Source</h3>
Â Â Â Â Â Â Â Â <Pie
Â Â Â Â Â Â Â Â Â Â data={{
Â Â Â Â Â Â Â Â Â Â Â Â labels: Object.keys(xpByType),
Â Â Â Â Â Â Â Â Â Â Â Â datasets: [{
Â Â Â Â Â Â Â Â Â Â Â Â Â Â data: Object.values(xpByType),
Â Â Â Â Â Â Â Â Â Â Â Â Â Â backgroundColor: ['#00ff99', '#ffcc00', '#3399ff', '#ff6699', '#aaaaaa']
Â Â Â Â Â Â Â Â Â Â Â Â }]
Â Â Â Â Â Â Â Â Â Â }}
Â Â Â Â Â Â Â Â Â Â options={{
Â Â Â Â Â Â Â Â Â Â Â Â plugins: {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â legend: { labels: { color: '#fff' } }
Â Â Â Â Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â Â Â Â Â }}
Â Â Â Â Â Â Â Â />
Â Â Â Â Â Â </div>

Â Â Â Â Â Â {/* Autonomy projection */}
Â Â Â Â Â Â <div style={{ marginTop: '2rem' }}>
Â Â Â Â Â Â Â Â <h3>ðŸ§  Autonomy ETA</h3>
Â Â Â Â Â Â Â Â {xpProjection < 0 ? (
Â Â Â Â Â Â Â Â Â Â <p>ðŸ“‰ No XP gain today. ETA unavailable.</p>
Â Â Â Â Â Â Â Â ) : (
Â Â Â Â Â Â Â Â Â Â <p>ðŸ“† Estimated unlock in <strong>{xpProjection}</strong> day(s)</p>
Â Â Â Â Â Â Â Â )}
Â Â Â Â Â Â </div>

Â Â Â Â Â Â {/* Crate efficiency */}
Â Â Â Â Â Â <div style={{ marginTop: '2rem' }}>
Â Â Â Â Â Â Â Â <h3>ðŸ“¦ Crate Efficiency</h3>
Â Â Â Â Â Â Â Â <p>Opened: {crateStats.count} crates</p>
Â Â Â Â Â Â Â Â <p>Total XP earned: {crateStats.totalXP}</p>
Â Â Â Â Â Â Â Â <p>Average per crate: {crateStats.count > 0 ? Math.round(crateStats.totalXP / crateStats.count) : 0} XP</p>
Â Â Â Â Â Â </div>

Â Â Â Â Â Â {/* Most claimed missions */}
Â Â Â Â Â Â <div style={{ marginTop: '2rem' }}>
Â Â Â Â Â Â Â Â <h3>ðŸŽ¯ Top Missions Claimed</h3>
Â Â Â Â Â Â Â Â {missionStats.length === 0 ? (
Â Â Â Â Â Â Â Â Â Â <p>No mission claims found.</p>
Â Â Â Â Â Â Â Â ) : (
Â Â Â Â Â Â Â Â Â Â <ul>
Â Â Â Â Â Â Â Â Â Â Â Â {missionStats.map((m) => (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <li key={m.mission_id}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Mission ID: <strong>{m.mission_id}</strong> â€“ {m.count} claim(s)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </li>
Â Â Â Â Â Â Â Â Â Â Â Â ))}
Â Â Â Â Â Â Â Â Â Â </ul>
Â Â Â Â Â Â Â Â )}
Â Â Â Â Â Â </div>
Â Â Â Â </div>
Â Â );
}