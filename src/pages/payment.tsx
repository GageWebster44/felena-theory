// pages/payment.tsx
import { useEffect, useState } from 'react';
import { withGuardianGate } from '@/components/withGuardianGate';
import styles from '@/styles/crtLaunch.module.css';
import { useRouter } from 'next/router';

function PaymentPage() {
export default withGuardianGate(Page);
Â  const [loading, setLoading] = useState(false);
Â  const [error, setError] = useState('');
Â  const router = useRouter();

Â  const handleCheckout = async () => {
Â  Â  setLoading(true);
Â  Â  setError('');

Â  Â  try {
Â  Â  Â  const res = await fetch('/api/create-stripe-session', {
Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  headers: { 'Content-Type': 'application/json' },
Â  Â  Â  Â  body: JSON.stringify({})
Â  Â  Â  });

Â  Â  Â  const data = await res.json();
Â  Â  Â  if (data?.url) {
Â  Â  Â  Â  window.location.href = data.url;
Â  Â  Â  } else {
Â  Â  Â  Â  throw new Error('Invalid response from server.');
Â  Â  Â  }
Â  Â  } catch (err) {
Â  Â  Â  console.error(err);
Â  Â  Â  setError('Failed to initiate checkout. Please try again later.');
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  return (
import Head from 'next/head';
<Head>
  <title>Felena Theory</title>
  <meta name="description" content="Enter the XP Quantum Grid." />
</Head>

Â  Â  <div className={styles.crtScreen}>
Â  Â  Â  <h1 className={styles.crtTitle}>ðŸ’³ Felena Vision Payment</h1>
Â  Â  Â  <p className={styles.crtText}>
Â  Â  Â  Â  This is a one-time $100 unlock for Felena Vision access.
Â  Â  Â  Â  <br />
Â  Â  Â  Â  Youâ€™ll receive:
Â  Â  Â  Â  <ul>
Â  Â  Â  Â  Â  <li>ðŸŽ– Vision Badge</li>
Â  Â  Â  Â  Â  <li>ðŸ“¦ Rare XP Crate</li>
Â  Â  Â  Â  Â  <li>ðŸ”“ Engine Grid Access</li>
Â  Â  Â  Â  Â  <li>ðŸ§¬ Personalized Keycard</li>
Â  Â  Â  Â  </ul>
Â  Â  Â  Â  <br />
Â  Â  Â  Â  By continuing, you agree to our <a href="/terms" target="_blank">XP Terms</a>.
Â  Â  Â  </p>

Â  Â  Â  {error && <p className={styles.crtText} style={{ color: '#f66' }}>{error}</p>}

Â  Â  Â  <div className={styles.crtMenu}>
Â  Â  Â  Â  <button className={styles.crtButton} onClick={handleCheckout} disabled={loading}>
Â  Â  Â  Â  Â  {loading ? 'Processing...' : 'ðŸ’¸ Continue to Payment'}
Â  Â  Â  Â  </button>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
}