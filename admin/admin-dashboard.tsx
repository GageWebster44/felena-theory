import { useEffect, useState } from 'react';
import { useUser } from '@supabase/auth-helpers-react';
import { markOnboardingStep } from '@/utils/onboarding-progress';
import { supabase } from '@/utils/supabaseClient';
import { withAdminGate } from '@/components/withRoleGate';
import styles from '@/styles/crtLaunch.module.css';
import { Line } from 'react-chartjs-2';
import {
Â Â Chart as ChartJS,
Â Â CategoryScale,
Â Â LinearScale,
Â Â PointElement,
Â Â LineElement,
Â Â Title,
Â Â Tooltip,
Â Â Legend
} from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

function AdminDashboard() {
Â Â const user = useUser();

Â Â const [stats, setStats] = useState({
Â Â Â Â redemptionsToday: 0,
Â Â Â Â totalUsers: 0,
Â Â Â Â guardianPending: 0,
Â Â Â Â referralsToday: 0,
Â Â Â Â suspiciousIPs: 0,
Â Â Â Â auditActionsToday: 0,
Â Â Â Â loginsToday: 0,
Â Â Â Â totalXP: 0,
Â Â Â Â topUser: null,
Â Â Â Â newOperators: [] // âœ… alias-ready
Â Â });

Â Â const [redemptionHistory, setRedemptionHistory] = useState(null);

Â Â const fetchStats = async () => {
Â Â Â Â const today = new Date().toISOString().split('T')[0];

Â Â Â Â const [
Â Â Â Â Â Â redemptRes,
Â Â Â Â Â Â userRes,
Â Â Â Â Â Â guardianRes,
Â Â Â Â Â Â referralRes,
Â Â Â Â Â Â loginRes,
Â Â Â Â Â Â redemptionLogs,
Â Â Â Â Â Â auditRes,
Â Â Â Â Â Â loginsTodayRes,
Â Â Â Â Â Â xpSumRes,
Â Â Â Â Â Â topUserRes,
Â Â Â Â Â Â newOps
Â Â Â Â ] = await Promise.all([
Â Â Â Â Â Â supabase.from('xp_redemptions').select('id', { count: 'exact' }).gte('timestamp', `${today}T00:00:00Z`),
Â Â Â Â Â Â supabase.from('user_profiles').select('id', { count: 'exact' }),
Â Â Â Â Â Â supabase.from('guardian_consent').select('*'),
Â Â Â Â Â Â supabase.from('referral_logs').select('id', { count: 'exact' }).gte('timestamp', `${today}T00:00:00Z`),
Â Â Â Â Â Â supabase.from('login_logs').select('ip_address, email'),
Â Â Â Â Â Â supabase.from('xp_redemptions').select('timestamp'),
Â Â Â Â Â Â supabase.from('audit_logs').select('id', { count: 'exact' }).gte('timestamp', `${today}T00:00:00Z`),
Â Â Â Â Â Â supabase.from('login_logs').select('id', { count: 'exact' }).gte('timestamp', `${today}T00:00:00Z`),
Â Â Â Â Â Â supabase.rpc('total_xp_sum'),
Â Â Â Â Â Â supabase.from('user_profiles').select('alias, xp').order('xp', { ascending: false }).limit(1),
Â Â Â Â Â Â supabase
Â Â Â Â Â Â Â Â .from('user_onboarding')
Â Â Â Â Â Â Â Â .select('user_id, user_profiles(alias)')
Â Â Â Â Â Â Â Â .eq('completed', true)
Â Â Â Â Â Â Â Â .gte('promoted_at', today)
Â Â Â Â Â Â Â Â .order('promoted_at', { ascending: false })
Â Â Â Â ]);

Â Â Â Â const ipMap = {};
Â Â Â Â loginRes.data?.forEach(({ ip_address, email }) => {
Â Â Â Â Â Â if (!ip_address || !email) return;
Â Â Â Â Â Â if (!ipMap[ip_address]) ipMap[ip_address] = new Set();
Â Â Â Â Â Â ipMap[ip_address].add(email);
Â Â Â Â });
Â Â Â Â const suspiciousCount = Object.values(ipMap).filter(set => set.size > 1).length;

Â Â Â Â const counts = {};
Â Â Â Â redemptionLogs.data?.forEach(({ timestamp }) => {
Â Â Â Â Â Â const date = new Date(timestamp).toLocaleDateString();
Â Â Â Â Â Â counts[date] = (counts[date] || 0) + 1;
Â Â Â Â });
Â Â Â Â const labels = Object.keys(counts);
Â Â Â Â const values = labels.map(l => counts[l]);
Â Â Â Â setRedemptionHistory({
Â Â Â Â Â Â labels,
Â Â Â Â Â Â datasets: [
Â Â Â Â Â Â Â Â {
Â Â Â Â Â Â Â Â Â Â label: 'XP Redemptions Over Time',
Â Â Â Â Â Â Â Â Â Â data: values,
Â Â Â Â Â Â Â Â Â Â fill: false,
Â Â Â Â Â Â Â Â Â Â borderColor: 'lime',
Â Â Â Â Â Â Â Â Â Â tension: 0.2
Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â ]
Â Â Â Â });

Â Â Â Â setStats({
Â Â Â Â Â Â redemptionsToday: redemptRes.count || 0,
Â Â Â Â Â Â totalUsers: userRes.count || 0,
Â Â Â Â Â Â guardianPending: guardianRes.data?.filter(g => !g.verified).length || 0,
Â Â Â Â Â Â referralsToday: referralRes.count || 0,
Â Â Â Â Â Â suspiciousIPs: suspiciousCount,
Â Â Â Â Â Â auditActionsToday: auditRes.count || 0,
Â Â Â Â Â Â loginsToday: loginsTodayRes.count || 0,
Â Â Â Â Â Â totalXP: xpSumRes.data || 0,
Â Â Â Â Â Â topUser: topUserRes.data?.[0] || null,
Â Â Â Â Â Â newOperators: newOps?.data || []
Â Â Â Â });
Â Â };

Â Â useEffect(() => {
Â Â Â Â if (user) markOnboardingStep(user.id, 'visited_dashboard');
Â Â Â Â fetchStats();
Â Â }, [user]);

Â Â return (
import Head from 'next/head';
<Head>
  <title>Felena Theory</title>
  <meta name="description" content="Enter the XP Quantum Grid." />
</Head>

Â Â Â Â <div className={styles.crtFrame}>
Â Â Â Â Â Â <h1 className={styles.crtTitle}>Admin Dashboard</h1>

Â Â Â Â Â Â {stats.newOperators.length > 0 && (
Â Â Â Â Â Â Â Â <div className={styles.crtCard} style={{ backgroundColor: '#002d00', color: '#0f0' }}>
Â Â Â Â Â Â Â Â Â Â <h2>ðŸ†• New Operators Today</h2>
Â Â Â Â Â Â Â Â Â Â <ul>
Â Â Â Â Â Â Â Â Â Â Â Â {stats.newOperators.map((op, i) => (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <li key={i}>âœ… {op.user_profiles?.alias || op.user_id}</li>
Â Â Â Â Â Â Â Â Â Â Â Â ))}
Â Â Â Â Â Â Â Â Â Â </ul>
Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â )}

Â Â Â Â Â Â <div className={styles.crtGrid}>
Â Â Â Â Â Â Â Â <div className={styles.crtCard}><h2>XP Redemptions Today</h2><p>{stats.redemptionsToday}</p></div>
Â Â Â Â Â Â Â Â <div className={styles.crtCard}><h2>Total Users</h2><p>{stats.totalUsers}</p></div>
Â Â Â Â Â Â Â Â <div className={styles.crtCard}><h2>Guardian Requests Pending</h2><p>{stats.guardianPending}</p></div>
Â Â Â Â Â Â Â Â <div className={styles.crtCard}><h2>Referrals Today</h2><p>{stats.referralsToday}</p></div>
Â Â Â Â Â Â Â Â <div className={styles.crtCard}><h2>Suspicious IPs</h2><p>{stats.suspiciousIPs}</p></div>
Â Â Â Â Â Â Â Â <div className={styles.crtCard}><h2>Audit Logs Today</h2><p>{stats.auditActionsToday}</p></div>
Â Â Â Â Â Â Â Â <div className={styles.crtCard}><h2>Logins Today</h2><p>{stats.loginsToday}</p></div>
Â Â Â Â Â Â Â Â <div className={styles.crtCard}><h2>Total XP in System</h2><p>{stats.totalXP.toLocaleString()}</p></div>
Â Â Â Â Â Â Â Â <div className={styles.crtCard}>
Â Â Â Â Â Â Â Â Â Â <h2>Top XP Holder</h2>
Â Â Â Â Â Â Â Â Â Â <p>{stats.topUser?.alias || 'N/A'} ({stats.topUser?.xp || 0} XP)</p>
Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â </div>

Â Â Â Â Â Â {redemptionHistory && (
Â Â Â Â Â Â Â Â <div style={{ background: 'black', padding: '1rem', marginTop: '2rem' }}>
Â Â Â Â Â Â Â Â Â Â <Line data={redemptionHistory} />
Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â )}
Â Â Â Â </div>
Â Â );
}

export default withAdminGate(AdminDashboard);