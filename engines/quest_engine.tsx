// pages/engines/quest_engine.tsx
import Head from 'next/head';
import { useEffect, useState } from 'react';

import withGuardianGate from '@/components/withGuardianGate';
import supabase from '@/utils/supabaseClient';

import styles from '@/styles/crtLaunch.module.css';

// Optional helpers (keep if you have these utilities)
import { logXP } from '@/utils/logXP'; // no-op if you decide to remove
import triggerXPBurst from '@/utils/triggerXPBurst';
import playSound from '@/utils/playSound';
import { format } from 'date-fns';

type Audience = 'kids' | 'public' | 'operators' | 'all';

interface Quest {
Â Â id: string;
Â Â title: string;
Â Â description: string;
Â Â skill_type: string;
Â Â audience: Audience | string;
Â Â xp_reward: number;
Â Â due_date: string | null;
Â Â crate_reward?: string | null;
}

function QuestEnginePage() {
Â Â const [quests, setQuests] = useState<Quest[]>([]);
Â Â const [completed, setCompleted] = useState<string[]>([]);
Â Â const [loading, setLoading] = useState(false);
Â Â const [filter, setFilter] = useState<Audience | 'all'>('all');
Â Â const [userId, setUserId] = useState<string>('');

Â Â // Initial load: who am I + quests + what I've completed
Â Â useEffect(() => {
Â Â Â Â (async () => {
Â Â Â Â Â Â await fetchUser();
Â Â Â Â Â Â await fetchQuests();
Â Â Â Â Â Â await fetchCompleted();
Â Â Â Â })();
Â Â Â Â // eslint-disable-next-line react-hooks/exhaustive-deps
Â Â }, []);

Â Â async function fetchUser() {
Â Â Â Â const { data } = await supabase.auth.getUser();
Â Â Â Â if (data?.user?.id) setUserId(data.user.id);
Â Â }

Â Â async function fetchQuests() {
Â Â Â Â try {
Â Â Â Â Â Â const { data, error } = await supabase
Â Â Â Â Â Â Â Â .from('xp_quests')
Â Â Â Â Â Â Â Â .select<Quest>('*')
Â Â Â Â Â Â Â Â .order('due_date', { ascending: true });
Â Â Â Â Â Â if (error) throw error;
Â Â Â Â Â Â setQuests(data || []);
Â Â Â Â } catch (error) {
Â Â Â Â Â Â // eslint-disable-next-line no-console
Â Â Â Â Â Â console.error('âœ– Supabase error in quest_engine.tsx (fetchQuests):', error);
Â Â Â Â }
Â Â }

Â Â async function fetchCompleted() {
Â Â Â Â try {
Â Â Â Â Â Â if (!userId) {
Â Â Â Â Â Â Â Â const { data: u } = await supabase.auth.getUser();
Â Â Â Â Â Â Â Â if (u?.user?.id) setUserId(u.user.id);
Â Â Â Â Â Â }
Â Â Â Â Â Â const uid = userId || (await supabase.auth.getUser()).data?.user?.id || '';
Â Â Â Â Â Â if (!uid) return;

Â Â Â Â Â Â const { data, error } = await supabase
Â Â Â Â Â Â Â Â .from('xp_quest_log')
Â Â Â Â Â Â Â Â .select('quest_id')
Â Â Â Â Â Â Â Â .eq('user_id', uid);

Â Â Â Â Â Â if (error) throw error;

Â Â Â Â Â Â setCompleted((data || []).map((r: any) => r.quest_id));
Â Â Â Â } catch (error) {
Â Â Â Â Â Â // eslint-disable-next-line no-console
Â Â Â Â Â Â console.error('âœ– Supabase error in quest_engine.tsx (fetchCompleted):', error);
Â Â Â Â }
Â Â }

Â Â async function handleClaim(q: Quest) {
Â Â Â Â if (!userId) return;
Â Â Â Â if (completed.includes(q.id)) return;

Â Â Â Â setLoading(true);
Â Â Â Â try {
Â Â Â Â Â Â // 1) Write quest log
Â Â Â Â Â Â const { error: logErr } = await supabase.from('xp_quest_log').insert({
Â Â Â Â Â Â Â Â user_id: userId,
Â Â Â Â Â Â Â Â quest_id: q.id,
Â Â Â Â Â Â Â Â season: 1,
Â Â Â Â Â Â Â Â claimed_at: new Date().toISOString(),
Â Â Â Â Â Â });
Â Â Â Â Â Â if (logErr) throw logErr;

Â Â Â Â Â Â // 2) Update XP (RPC preferred so DB owns validation)
Â Â Â Â Â Â const reason = `quest_claim: ${q.title}`;
Â Â Â Â Â Â const { error: rpcErr } = await supabase.rpc('update_xp', {
Â Â Â Â Â Â Â Â uid: userId,
Â Â Â Â Â Â Â Â xp_delta: q.xp_reward,
Â Â Â Â Â Â Â Â reason,
Â Â Â Â Â Â });
Â Â Â Â Â Â if (rpcErr) throw rpcErr;

Â Â Â Â Â Â // Optional UI niceties
Â Â Â Â Â Â try {
Â Â Â Â Â Â Â Â await logXP?.('quest_claim', q.xp_reward, `Completed: ${q.title}`);
Â Â Â Â Â Â } catch {
Â Â Â Â Â Â Â Â /* ignore if helper not present */
Â Â Â Â Â Â }
Â Â Â Â Â Â triggerXPBurst?.({ amount: q.xp_reward, label: q.title });
Â Â Â Â Â Â playSound?.('xp-rain');

Â Â Â Â Â Â // 3) Optional crate reward
Â Â Â Â Â Â if (q.crate_reward) {
Â Â Â Â Â Â Â Â const { error: crateErr } = await supabase.from('xp_crates').insert({
Â Â Â Â Â Â Â Â Â Â user_id: userId,
Â Â Â Â Â Â Â Â Â Â label: q.crate_reward,
Â Â Â Â Â Â Â Â Â Â xp_value: Math.round(q.xp_reward / 2),
Â Â Â Â Â Â Â Â Â Â source: 'quest',
Â Â Â Â Â Â Â Â Â Â opened: false,
Â Â Â Â Â Â Â Â });
Â Â Â Â Â Â Â Â if (crateErr) throw crateErr;
Â Â Â Â Â Â }

Â Â Â Â Â Â // Update local state
Â Â Â Â Â Â setCompleted((prev) => [...new Set([...prev, q.id])]);
Â Â Â Â } catch (error) {
Â Â Â Â Â Â // eslint-disable-next-line no-console
Â Â Â Â Â Â console.error('âœ– Supabase error in quest_engine.tsx (handleClaim):', error);
Â Â Â Â } finally {
Â Â Â Â Â Â setLoading(false);
Â Â Â Â }
Â Â }

Â Â const filtered =
Â Â Â Â filter === 'all'
Â Â Â Â Â Â ? quests
Â Â Â Â Â Â : quests.filter((q) => String(q.audience).toLowerCase() === filter);

Â Â return (
Â Â Â Â <>
Â Â Â Â Â Â <Head>
Â Â Â Â Â Â Â Â <title>Felena Theory</title>
Â Â Â Â Â Â Â Â <meta name="description" content="Enter the XP Quantum Grid." />
Â Â Â Â Â Â </Head>

Â Â Â Â Â Â <div className={styles.crtScreen}>
Â Â Â Â Â Â Â Â <h2>ðŸŽ¯ QUEST ENGINE</h2>
Â Â Â Â Â Â Â Â <p>Realâ€‘time XP quest editor + claim panel for all live tasks in the system.</p>

Â Â Â Â Â Â Â Â <div style={{ marginTop: '1rem' }}>
Â Â Â Â Â Â Â Â Â Â <label> Filter by audience: </label>
Â Â Â Â Â Â Â Â Â Â <select
Â Â Â Â Â Â Â Â Â Â Â Â className={styles.crtInput}
Â Â Â Â Â Â Â Â Â Â Â Â onChange={(e) => setFilter(e.target.value as Audience | 'all')}
Â Â Â Â Â Â Â Â Â Â Â Â value={filter}
Â Â Â Â Â Â Â Â Â Â >
Â Â Â Â Â Â Â Â Â Â Â Â <option value="all">All</option>
Â Â Â Â Â Â Â Â Â Â Â Â <option value="kids">Kids</option>
Â Â Â Â Â Â Â Â Â Â Â Â <option value="public">Public</option>
Â Â Â Â Â Â Â Â Â Â Â Â <option value="operators">Operators</option>
Â Â Â Â Â Â Â Â Â Â </select>
Â Â Â Â Â Â Â Â </div>

Â Â Â Â Â Â Â Â <div className="grid" style={{ marginTop: '1rem' }}>
Â Â Â Â Â Â Â Â Â Â {filtered.map((q) => {
Â Â Â Â Â Â Â Â Â Â Â Â const isClaimed = completed.includes(q.id);
Â Â Â Â Â Â Â Â Â Â Â Â const due =
Â Â Â Â Â Â Â Â Â Â Â Â Â Â q.due_date ? format(new Date(q.due_date), 'MMM d, yyyy') : 'â€”';

Â Â Â Â Â Â Â Â Â Â Â Â return (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div key={q.id} className={styles.shopCard}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <h3>{q.title}</h3>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <p className="text-sm text-cyan-400">
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {q.skill_type} Â· {String(q.audience)}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </p>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <p className="text-xs text-yellow-300">
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Due: <strong>{due}</strong>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </p>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <p className="text-green-400 font-bold">{q.xp_reward} XP</p>

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {isClaimed ? (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <p style={{ color: '#999', marginTop: '.5rem' }}>âœ” Already Claimed</p>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ) : (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <button
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â className={styles.crtButton}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â onClick={() => handleClaim(q)}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â disabled={loading}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â style={{ marginTop: '.5rem' }}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â >
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â âœ” Claim XP
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </button>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â )}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â Â Â Â Â );
Â Â Â Â Â Â Â Â Â Â })}
Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â </div>
Â Â Â Â </>
Â Â );
}

export default withGuardianGate(QuestEnginePage);