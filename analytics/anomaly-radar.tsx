 import { useEffect, useState } from 'react';
import { withGuardianGate } from '@/components/withGuardianGate';
import styles from '@/styles/crtLaunch.module.css';
import playSound from '@/utils/playSound';
import logXP from '@/utils/logXP';

interface Anomaly {
Â Â id: string;
Â Â label: string;
Â Â severity: 'low' | 'medium' | 'high';
Â Â timestamp: string;
Â Â description: string;
}

const mockEvents: Anomaly[] = [
Â Â { id: 'a1', label: 'Spoof Wall', severity: 'high', description: 'Large ask wall vanished at 9:32am', timestamp: '' },
Â Â { id: 'a2', label: 'Hidden Bid', severity: 'medium', description: 'Hidden order revealed on pullback', timestamp: '' },
Â Â { id: 'a3', label: 'Signal Jam', severity: 'low', description: 'Odd fluctuation in mid-quote zone', timestamp: '' },
];

function AnomalyRadar() {
export default withGuardianGate(Page);
Â Â const [feed, setFeed] = useState<Anomaly[]>([]);

Â Â useEffect(() => {
Â Â Â Â const interval = setInterval(() => {
Â Â Â Â Â Â const index = Math.floor(Math.random() * mockEvents.length);
Â Â Â Â Â Â const anomaly = {
Â Â Â Â Â Â Â Â ...mockEvents[index],
Â Â Â Â Â Â Â Â timestamp: new Date().toLocaleTimeString(),
Â Â Â Â Â Â Â Â id: Math.random().toString(36).substring(7)
Â Â Â Â Â Â };
Â Â Â Â Â Â setFeed((prev) => [anomaly, ...prev].slice(0, 10));
Â Â Â Â Â Â playSound('ping-scan');
Â Â Â Â }, 8000);

Â Â Â Â return () => clearInterval(interval);
import Head from 'next/head';
<Head>
  <title>Felena Theory</title>
  <meta name="description" content="Enter the XP Quantum Grid." />
</Head>

Â Â }, []);

Â Â const handleSendToSim = async (anomaly: Anomaly) => {
Â Â Â Â playSound('beep-confirm');
Â Â Â Â await logXP('anomaly_flag', 0, `Sent to simulator: ${anomaly.label}`);
Â Â Â Â alert(`ðŸ§  ${anomaly.label} dispatched to AI system`);
Â Â };

Â Â return (
Â Â Â Â <div className={styles.crtScreen}>
Â Â Â Â Â Â <h2>ðŸ§  ANOMALY RADAR</h2>
Â Â Â Â Â Â <p>Tracking spoof walls, volume traps, signal jamming & more.</p>

Â Â Â Â Â Â <div className={styles.anomalyFeed} style={{ marginTop: '2rem' }}>
Â Â Â Â Â Â Â Â {feed.map((a) => (
Â Â Â Â Â Â Â Â Â Â <div key={a.id} className={`${styles.anomalyItem} ${styles['sev_' + a.severity]}`}>
Â Â Â Â Â Â Â Â Â Â Â Â <h4>{a.label} <span style={{ fontSize: '0.75rem', color: '#aaa' }}>({a.severity.toUpperCase()})</span></h4>
Â Â Â Â Â Â Â Â Â Â Â Â <p>{a.description}</p>
Â Â Â Â Â Â Â Â Â Â Â Â <p className={styles.timestamp}>{a.timestamp}</p>
Â Â Â Â Â Â Â Â Â Â Â Â <button className={styles.crtButton} onClick={() => handleSendToSim(a)}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Send to Simulator
Â Â Â Â Â Â Â Â Â Â Â Â </button>
Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â ))}
Â Â Â Â Â Â </div>
Â Â Â Â </div>
Â Â );
}